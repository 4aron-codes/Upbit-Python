import time
import pyupbit
import datetime
import requests
import bestk
# Files to be uploaded: UpbitPython, bestk.py, .env,

access = ""
secret = ""

# Discord Sending Message code begin {
from calendar import c
import os
import random

import discord
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

client = discord.Client()

@client.event
async def on_ready():
    channel = client.get_channel()
    await channel.send("Working")
    print(f'{client.user.name} has connected to Discord!')

client.run(TOKEN)
# Discord Sending Message code end }

# Get best K value # bestk.py needs to be uploaded on github
K_set = bestk.Get_bestk

# Upbit code
def get_target_price(ticker, k):
    """변동성 돌파 전략으로 매수 목표가 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=7)
    target_price = df.iloc[0]['close'] + ((df.iloc[0]['high'] - df.iloc[0]['low'])/3) * k
    return target_price

def get_start_time(ticker):
    """시작 시간 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_ma15(ticker):
    """15일 이동 평균선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=15)
    ma15 = df['close'].rolling(15).mean().iloc[-1]
    return ma15

def get_balance(coin):
    """잔고 조회"""
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == coin:
            if b['balance'] is not None:
                return float(b['balance'])
            else:
                return 0

def get_current_price(ticker):
    """현재가 조회"""
    return pyupbit.get_orderbook(tickers=ticker)[0]["orderbook_units"][0]["ask_price"]

# 로그인
upbit = pyupbit.Upbit(access, secret)

while True:
    try:
        now = datetime.datetime.now()
        start_time = get_start_time("KRW-BTC")
        end_time = start_time + datetime.timedelta(days=1)

        origin_KRW = 0

        if start_time < now < end_time - datetime.timedelta(minutes=2):
            K_set = bestk.Get_bestk
            

            target_price = get_target_price("KRW-BTC", K_set)
            ma15 = get_ma15("KRW-BTC")
            current_price = get_current_price("KRW-BTC")
            if target_price < current_price and ma15 < current_price:
                krw = get_balance("KRW")
                origin_KRW = krw

                if krw > 5000:

                    @client.event
                    async def on_ready():
                        channel = client.get_channel()
                        await channel.send("%f has been set up as K" % (K_set))
                    
                    buy_result = upbit.buy_market_order("KRW-BTC", krw*0.9995)
                    
                    @client.event
                    async def on_ready():
                        channel = client.get_channel()
                        await channel.send("Trade has been made Successfully with buying %f" % (current_price))

                    
                    
                    

        else:
            btc = get_balance("BTC")
            if btc > 0.00008:

                current_price = get_current_price("KRW-BTC")
                krw = get_balance("KRW")

                sell_result = upbit.sell_market_order("KRW-BTC", btc*0.9995)
                
                @client.event
                async def on_ready():
                    channel = client.get_channel()
                    await channel.send("Trade has been made Successfully with selling %f" % (current_price))
                    await channel.send("Profit = %f KRW" % (origin_KRW - krw))
                    
        time.sleep(1)
    except Exception as e:
        print("BTC")
        print(e)
        @client.event
        async def on_ready():
            channel = client.get_channel()
            await channel.send(e)
        time.sleep(1)
