import time
import pyupbit
import datetime
import requests
import bestk
# Files to be uploaded: UpbitPython, bestk.py, .env,

access = ""
secret = ""

# Discord Sending Message code begin {
from calendar import c
import os
import random

import discord
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
client = discord.Client()
@client.event
async def on_ready():
    channel = client.get_channel() #Discord Channel ID
    await channel.send("Working")
# Discord Sending Message code end }
# Get best K value # bestk.py needs to be uploaded on github
    K_set = bestk.Get_bestk()
    # Upbit code
    def get_target_price(ticker, k):
        """변동성 돌파 전략으로 매수 목표가 조회"""
        df = pyupbit.get_ohlcv(ticker, interval="day", count=7)
        target_price = df.iloc[0]['close'] + ((df.iloc[0]['high'] - df.iloc[0]['low'])) * k
        return target_price

    def get_start_time(ticker):
        """시작 시간 조회"""
        df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
        start_time = df.index[0]
        return start_time

    def get_ma15(ticker):
        """15일 이동 평균선 조회"""
        df = pyupbit.get_ohlcv(ticker, interval="day", count=15)
        ma15 = df['close'].rolling(15).mean().iloc[-1]
        return ma15

    def get_balance(coin):
        """잔고 조회"""
        balances = upbit.get_balances()
        for b in balances:
            if b['currency'] == coin:
                if b['balance'] is not None:
                    return float(b['balance'])
                else:
                    return 0

    def get_current_price(ticker):
        """현재가 조회"""
        print(pyupbit.get_current_price(ticker))
        return pyupbit.get_current_price(ticker)
    
    # 로그인
    upbit = pyupbit.Upbit(access, secret)
    print(get_balance("KRW-BTC"))
    origin_KRW = 213912

    while True:
        try:
            now = datetime.datetime.now()
            start_time = get_start_time("KRW-BTC")
            end_time = start_time + datetime.timedelta(days=1)
            BTC_price_saved = get_current_price("KRW-BTC")
            Status = True
            while start_time < now < end_time - datetime.timedelta(minutes=10):
                now = datetime.datetime.now()
                if Status == True:
                    K_set = bestk.Get_bestk()
                    target_price = get_target_price("KRW-BTC", K_set)
                    ma15 = get_ma15("KRW-BTC")
                    current_price = get_current_price("KRW-BTC")

                    if target_price < current_price and ma15 < current_price:
                        krw = get_balance("KRW")
                        
                        if krw > 5000:
                            buy_result = upbit.buy_market_order("KRW-BTC", krw*0.9995)
                            await channel.send(f"K has been set as {K_set}")
                            await channel.send(f"Trade has been made Successfully with buying {current_price}")
                            Status = False

                time.sleep(1)
                # 3시간마다 체크
                if Status == False:
                    now_slice = (str(now))[11:16]
                    time_target_array = ["09:00","12:00","15:00","18:00","21:00","24:00","03:00","06:00"]
                    for a in time_target_array:
                        if a == now_slice:
                            BTC_price_now = get_current_price("KRW-BTC")
                            btc = get_balance("BTC")
                            
                            if (btc is not None and btc > 0.00008 and (BTC_price_now / BTC_price_saved) <= 0.995) or (BTC_price_now / BTC_price_saved >= 1.002):
                                sell_result = upbit.sell_market_order("KRW-BTC", btc*0.9995)
                                krw = get_balance("KRW")
                                await channel.send(f"Trade has been made Successfully with selling {BTC_price_now}")
                                await channel.send(f"Profit = {krw - origin_KRW} KRW")
                                await channel.send(f"Current KRW = {krw}")
                                origin_KRW = krw
                                BTC_price_saved = BTC_price_now
                                time.sleep(60)

                            elif krw > 5000 and (BTC_price_now / BTC_price_saved >= 1.002):
                                buy_result = upbit.buy_market_order("KRW-BTC", krw*0.9995)
                                await channel.send(f"Trade has been made Successfully with buying {current_price}")
                                BTC_price_saved = BTC_price_now
                                time.sleep(60)

                    BTC_price_now = get_current_price("KRW-BTC")
                    btc = get_balance("BTC")
                    if btc is not None and btc > 0.00008 and BTC_price_now / BTC_price_saved <= 0.995:
                        sell_result = upbit.sell_market_order("KRW-BTC", btc*0.9995)
                        krw = get_balance("KRW")
                        await channel.send(f"Trade has been made Successfully with selling {BTC_price_now}")
                        await channel.send(f"Profit = {krw - origin_KRW} KRW")
                        await channel.send(f"Current KRW = {krw}")
                        origin_KRW = krw
                        BTC_price_saved = BTC_price_now
                    elif BTC_price_now / BTC_price_saved >= 1.005:
                        buy_result = upbit.buy_market_order("KRW-BTC", krw*0.9995)
                        await channel.send(f"Trade has been made Successfully with buying {current_price}")
                        BTC_price_saved = BTC_price_now
                # idea:매일 9시 비트코인 현재가 save하고 3시간마다 증가량 감소량 체크 및 save renew하고 중간에 0.5% 감소시 팔고 증가일시 팜
                # idea:팔았을 시 다음 3시간 올 때까지 아무것도 하지 않고 시간 지났을 시 그 전 3시간 때 save한 비트코인 값과 비교해서 감소했을 시 사지 않음
                # ex: 12시 체크에 증가해서 팔고 3시 됐을 때 샀는데 4시30분에 0.5% 이상 감소 됐다면 팔고 6시에 다시 변화량 체크
                time.sleep(2)
            
            btc = get_balance("BTC")
            if btc is not None and btc > 0.00008:
                sell_result = upbit.sell_market_order("KRW-BTC", btc*0.9995)
                krw = get_balance("KRW")
                await channel.send(f"Trade has been made Successfully with selling {BTC_price_now}")
                await channel.send(f"Profit = {krw - origin_KRW} KRW")
                await channel.send(f"Current KRW = {krw}")
                origin_KRW = krw
                BTC_price_saved = BTC_price_now
                time.sleep(60)
            time.sleep(1)
        except Exception as e:
            print("BTC")
            print(e)
            channel = client.get_channel() #change the channel ID to the upbit-trade-error
            await channel.send(e)
            channel = client.get_channel() #change the channel ID to the upbit-trade back
            time.sleep(1)
client.run(TOKEN)
